<?php

require_once 'tripal_manage_menus.install';

/**
 * Implements hook_entity_delete().
 */
function tripal_manage_menus_entity_delete($entity, $type) {
  if (property_exists($entity, "term_id") && in_array($entity->term_id, tripal_manage_menus_get_entity_bundle('organism'))) {
    tripal_manage_menus_rebuild_menu_links('main-menu', 'Trees', 'organism');
    // Hook fires before entity is deleted so manually take out the deleted entity from the links
    db_query('DELETE FROM {menu_links} ml WHERE link_title = :title',
      [':title' => $entity->title]);
  }
}

/**
 * Implements hook_entity_insert().
 */
function tripal_manage_menus_entity_insert($entity, $type) {
  if (property_exists($entity, "term_id") && in_array($entity->term_id, tripal_manage_menus_get_entity_bundle('organism')))
    tripal_manage_menus_rebuild_menu_links('main-menu', 'Trees', 'organism');
}

/**
 * Implements hook_entity_update().
 */
function tripal_manage_menus_entity_update($entity, $type) {
  if (property_exists($entity, "term_id") && in_array($entity->term_id, tripal_manage_menus_get_entity_bundle('organism'))) {
    tripal_manage_menus_rebuild_menu_links('main-menu', 'Trees', 'organism');
  }
}

/**
 * Removes all existing menu links for a given parent menu link and rebuilds the links from scratch.
 *
 * @param $menu_name
 *  A string for the name of the menu containing the link to rebuild.
 *
 * @param $link_title
 *  A string for the name of the link to rebuild.
 *
 * @param $bundle_name
 *  A string of the name of the bundle containing the entities for which the links will be created.
 *
 */
function tripal_manage_menus_rebuild_menu_links($menu_name, $link_title, $bundle_name)
{
  $mlid = tripal_manage_menus_get_menu_link($menu_name, $link_title);
  $bundle_id = tripal_manage_menus_get_entity_bundle($bundle_name);
  $entities = tripal_manage_menus_get_entities($bundle_id);

  tripal_manage_menus_remove_menu_links($menu_name, $mlid);
  tripal_manage_menus_update_menu_links($entities, $menu_name, $mlid);
}