<?php

/**
 *  Implementation of hook_install();
 */
function tripal_manage_menus_install()
{
  /*
   * Creates a menu link called Trees under the main menu that contains links to all
   * entities of bundle organism on the site
   *
   * Links to chado/organism by default.
   */
  create_menu_link('Trees', 'organisms', 'main-menu', 'organism');
}

/**
 *  Implementation of hook_uninstall();
 */
function tripal_manage_menus_uninstall()
{
  destroy_menu_link('main-menu', 'Trees');
}

/**
 * Creates a menu link with child dynamic menu links for entities of a bundle.
 *
 * @param $link_title
 *  A string for the name of the menu link (e.g. Trees)
 *
 * @param $link_path
 *  A string for the path of the menu link (e.g. chado/organism)
 *
 * @param $menu_name
 *  A string for the name of the menu with which the menu link is associated (e.g. main-menu)
 *
 * @param $bundle_name
 *  A string for the bundle for which the menu will be created (e.g. organism)
 *
 */
function tripal_manage_menus_create_menu_link($link_title, $link_path, $menu_name, $bundle_name) {

  $existing_menu = db_query('
        SELECT ml.mlid
        FROM {menu_links} ml
        WHERE ml.menu_name = :main_menu
        AND   ml.link_title = :link_title',
    [':main_menu' => $menu_name, ':link_title' => $link_title])->fetchField();

  if (!$existing_menu) {
    $menu = [
      'link_title' => $link_title,
      'link_path' => $link_path,
      'menu_name' => $menu_name,
      'weight' => 0,
      'expanded' => 0,
      'customized' => 1,
    ];

    $mlid = menu_link_save($menu);
  } else {
    $mlid = $existing_menu;
    remove_menu_links($menu_name, $mlid);
  }

  $bundle_id = get_entity_bundle($bundle_name);
  $entities = get_entities($bundle_id);
  update_menu_links($entities, $menu_name, $mlid);
}

/**
 * Destroys a menu link and all its child links.
 *
 * @param $menu_name
 *  A string for the name of the menu
 *
 * @param $link_title
 *  A string for the name of the menu link
 *
 */
function tripal_manage_menus_destroy_menu_link($menu_name, $link_title)
{
  $mlid = get_menu_link($menu_name, $link_title);

  remove_menu_links($menu_name, $mlid);
  menu_link_delete($mlid);
}

/**
 * Returns the ID of a given bundle.
 *
 * @param $bundle_name
 *  The name of the bundle for which to retrieve the ID.
 *
 * @return $bundle_ids
 *  An array of strings containing the IDs of a bundle.
 *
 */
function tripal_manage_menus_get_entity_bundle($bundle_name) {
  $bundle_id = db_query('
        SELECT cb.bundle_id 
        FROM {chado_bundle} cb 
        WHERE cb.data_table = :bundle',
    [':bundle' => $bundle_name])->fetchAll();

  $bundle_ids = [];

  foreach($bundle_id as $object)
    $bundle_ids[] = $object->bundle_id;

  return $bundle_ids;
}

/**
 * Gets all records for a bundle.
 *
 * @param $bundle_id
 *  An array containing the IDs of all bundles for an entity.
 *
 * @return $entities
 *  An associative array of objects containing the names and IDs of the records under a given bundle.
 *
 */
function tripal_manage_menus_get_entities($bundle_id) {
  $entities = db_query('
        SELECT te.id, te.title
        FROM {tripal_entity} te
        WHERE te.term_id IN (:bundle_id)
        ORDER BY te.title ASC',
    [':bundle_id' => $bundle_id])->fetchAll();

  return $entities;
}

/**
 * Return the menu link ID of a menu link.
 *
 * @param $menu_name
 *  The name of the menu with which the link is associated.
 *
 * @param $link_title
 *  The name of the link from which to retrieve the ID.
 *
 * @return $mlid
 *  A string containing the menu link id for the given menu link.
 *
 */
function tripal_manage_menus_get_menu_link($menu_name, $link_title) {
  $mlid = db_query('
        SELECT ml.mlid
        FROM {menu_links} ml
        WHERE ml.menu_name = :menu_name
        AND   ml.link_title = :link_title',
    [':menu_name' => $menu_name, ':link_title' => $link_title])->fetchField();

  if ($mlid) return $mlid;

  return 0;
}

/**
 * Deletes all the menu links under a given parent menu link.
 *
 * @param $menu_name
 *  The name of the menu with which the link is associated.
 *
 * @param $mlid
 *  The menu link ID of the parent link. This is retrieved via get_menu().
 *
 */
function tripal_manage_menus_remove_menu_links($menu_name, $mlid) {
  $old_links = db_query('
        SELECT ml.mlid
        FROM {menu_links} ml
        WHERE ml.menu_name = :menu_name
        AND   ml.plid = :mlid',
    [':menu_name' => $menu_name, ':mlid' => $mlid])->fetchAll();

  foreach($old_links as $link) {
    db_query('DELETE FROM {menu_links} ml WHERE ml.mlid = :mlid',
      [':mlid' => $link->mlid]);
  }
}

/**
 * Creates menu links for a given array of entities under a given menu.
 *
 * @param $entities
 *  An associative array of objects containing the names and IDs for records.
 *
 * @param $menu_name
 *  The name of the menu for which to add the links.
 *
 * @param $mlid
 *  The menu link ID of the parent.
 *
 */
function tripal_manage_menus_update_menu_links($entities, $menu_name, $mlid) {
  $i = 0;

  foreach ($entities as $entity) {
    $link = [
      'link_title' => $entity->title,
      // Something along the lines of '/bio_data/10'
      'link_path' => 'bio_data/' . $entity->id,
      'menu_name' => $menu_name,
      // Minimum weight incremented by the number of elements
      'weight' => -50 + $i,
      'expanded' => 0,
      'plid' => $mlid,
      'customized' => 1,
    ];

    menu_link_save($link);

    $i++;
  }
}
